diff --git a/node_modules/html-to-react-components/lib/code.js b/node_modules/html-to-react-components/lib/code.js
index a4d9709..bd42a45 100644
--- a/node_modules/html-to-react-components/lib/code.js
+++ b/node_modules/html-to-react-components/lib/code.js
@@ -1,4 +1,4 @@
-var generate = require("babel-generator").default
+var generate = require("@babel/generator").default
 
 function toCode(components) {
   return Object.keys(components).reduce(function(cs, name) {
diff --git a/node_modules/html-to-react-components/lib/html2jsx.js b/node_modules/html-to-react-components/lib/html2jsx.js
index 7062916..186629d 100644
--- a/node_modules/html-to-react-components/lib/html2jsx.js
+++ b/node_modules/html-to-react-components/lib/html2jsx.js
@@ -25,7 +25,19 @@ var NODE_TYPE = {
 
 var ATTRIBUTE_MAPPING = {
   'for': 'htmlFor',
-  'class': 'className'
+  'class': 'className',
+  'onclick': 'onClick',
+  'xmlns:content': 'xmlnsContent',
+  'xmlns:dc': 'xmlnsDc',
+  'xmlns:foaf': 'xmlnsFoaf',
+  'xmlns:og': 'xmlnsOg',
+  'xmlns:rdfs': 'xmlnsRdfs',
+  'xmlns:sioc': 'xmlnsSioc',
+  'xmlns:sioct': 'xmlnsSioct',
+  'xmlns:skos': 'xmlnsSkos',
+  'xmlns:xsd': 'xmlnsXsd',
+  'csstext': 'cssText',
+  'innerhtml': 'innerHTML'
 };
 
 var ELEMENT_ATTRIBUTE_MAPPING = {
@@ -135,6 +147,7 @@ var ELEMENT_TAG_NAME_MAPPING = {
 
 var HTMLDOMPropertyConfig = require('react-dom/lib/HTMLDOMPropertyConfig');
 var SVGDOMPropertyConfig = require('react-dom/lib/SVGDOMPropertyConfig');
+var cssToObject = require('css-to-object');
 
 /**
  * Iterates over elements of object invokes iteratee for each element
@@ -265,7 +278,7 @@ function isConvertiblePixelValue(value) {
 function isNumeric(input) {
   return input !== undefined
     && input !== null
-    && (typeof input === 'number' || parseInt(input, 10) == input);
+    && (typeof input === 'number' || parseInt(input, 10) === input);
 }
 
 var createElement;
@@ -373,7 +386,7 @@ HTMLtoJSX.prototype = {
     html = html.trim();
     // Ugly method to strip script tags. They can wreak havoc on the DOM nodes
     // so let's not even put them in the DOM.
-    html = html.replace(/<script([\s\S]*?)<\/script>/g, '');
+    //html = html.replace(/<script([\s\S]*?)<\/script>/g, '');
     return html;
   },
 
@@ -487,6 +500,17 @@ HTMLtoJSX.prototype = {
     }
   },
 
+  _elementsContainsAttribute: function(node, attribute) {
+    var contains = false;
+    for (var i = 0, count = node.attributes.length; i < count; i++) {
+      if (node.attributes[i].name === attribute) {
+        contains = true;
+        break;
+      }
+    }
+    return contains;
+  },
+
   /**
    * Handles pre-visit behaviour for the specified element node
    *
@@ -503,7 +527,11 @@ HTMLtoJSX.prototype = {
       // Hax: textareas need their inner text moved to a "defaultValue" attribute.
       attributes.push('defaultValue={' + JSON.stringify(node.value) + '}');
     }
-    if (tagName === 'style') {
+    var shouldDangerouslySetInnerHTML =
+        (tagName === 'style' && !this._elementsContainsAttribute(node, 'csstext')) ||
+        (tagName === 'script' && !this._elementsContainsAttribute(node, 'src') && !this._elementsContainsAttribute(node, 'innerhtml')) ||
+        tagName === 'noscript'
+    if (shouldDangerouslySetInnerHTML) {
       // Hax: style tag contents need to be dangerously set due to liberal curly brace usage
       attributes.push('dangerouslySetInnerHTML={{__html: ' + JSON.stringify(node.textContent) + ' }}');
     }
@@ -552,7 +580,7 @@ HTMLtoJSX.prototype = {
     var tagName = jsxTagName(node.tagName);
     // If it has children, it's not self-closing
     // Exception: All children of a textarea are moved to a "defaultValue" attribute, style attributes are dangerously set.
-    return !node.firstChild || tagName === 'textarea' || tagName === 'style';
+    return !node.firstChild || tagName === 'textarea' || tagName === 'style' || tagName === 'script' || tagName === 'noscript';
   },
 
   /**
@@ -562,7 +590,7 @@ HTMLtoJSX.prototype = {
    */
   _visitText: function (node) {
     var parentTag = node.parentNode && jsxTagName(node.parentNode.tagName);
-    if (parentTag === 'textarea' || parentTag === 'style') {
+    if (parentTag === 'textarea' || parentTag === 'style' || parentTag === 'script' || parentTag === 'noscript') {
       // Ignore text content of textareas and styles, as it will have already been moved
       // to a "defaultValue" attribute and "dangerouslySetInnerHTML" attribute respectively.
       return;
@@ -639,8 +667,8 @@ HTMLtoJSX.prototype = {
    * @return {string}
    */
   _getStyleAttribute: function (styles) {
-    var jsxStyles = new StyleParser(styles).toJSXString();
-    return 'style={{' + jsxStyles + '}}';
+    var jsxStyles = cssToObject(styles);
+    return `style={${JSON.stringify(jsxStyles)}}`;
   },
 
   /**
@@ -657,78 +685,4 @@ HTMLtoJSX.prototype = {
   }
 };
 
-/**
- * Handles parsing of inline styles
- *
- * @param {string} rawStyle Raw style attribute
- * @constructor
- */
-var StyleParser = function (rawStyle) {
-  this.parse(rawStyle);
-};
-StyleParser.prototype = {
-  /**
-   * Parse the specified inline style attribute value
-   * @param {string} rawStyle Raw style attribute
-   */
-  parse: function (rawStyle) {
-    this.styles = {};
-    rawStyle.split(';').forEach(function (style) {
-      style = style.trim();
-      var firstColon = style.indexOf(':');
-      var key = style.substr(0, firstColon);
-      var value = style.substr(firstColon + 1).trim();
-      if (key !== '') {
-        // Style key should be case insensitive
-        key = key.toLowerCase();
-        this.styles[key] = value;
-      }
-    }, this);
-  },
-
-  /**
-   * Convert the style information represented by this parser into a JSX
-   * string
-   *
-   * @return {string}
-   */
-  toJSXString: function () {
-    var output = [];
-    eachObj(this.styles, function (key, value) {
-      output.push(this.toJSXKey(key) + ': ' + this.toJSXValue(value));
-    }, this);
-    return output.join(', ');
-  },
-
-  /**
-   * Convert the CSS style key to a JSX style key
-   *
-   * @param {string} key CSS style key
-   * @return {string} JSX style key
-   */
-  toJSXKey: function (key) {
-    // Don't capitalize -ms- prefix
-    if (/^-ms-/.test(key)) {
-      key = key.substr(1);
-    }
-    return hyphenToCamelCase(key);
-  },
-
-  /**
-   * Convert the CSS style value to a JSX style value
-   *
-   * @param {string} value CSS style value
-   * @return {string} JSX style value
-   */
-  toJSXValue: function (value) {
-    if (isNumeric(value)) {
-      return value
-    } else if (value.startsWith("'") || value.startsWith("\"")) {
-      return value
-    } else {
-      return '\'' + value.replace(/'/g, '"') + '\'';
-    }
-  }
-};
-
 module.exports = HTMLtoJSX;
diff --git a/node_modules/html-to-react-components/lib/jsx.js b/node_modules/html-to-react-components/lib/jsx.js
index 1b4aa2d..50eb185 100644
--- a/node_modules/html-to-react-components/lib/jsx.js
+++ b/node_modules/html-to-react-components/lib/jsx.js
@@ -1,4 +1,4 @@
-var parseJSX = require("babylon").parse;
+var parseJSX = require("@babel/parser").parse;
 var traverse = require("babel-traverse").default;
 var HTMLtoJSX = require("./html2jsx");
 
@@ -16,7 +16,7 @@ function childrenToComponents(ast) {
         var name;
 
         var attrs = p.node.openingElement.attributes.filter(function(attr) {
-          return attr.name.name === "data-component";
+          return attr.name.name === "data-bl-component";
         });
 
         if (attrs.length > 0) {
diff --git a/node_modules/html-to-react-components/lib/processor.js b/node_modules/html-to-react-components/lib/processor.js
index 1d6d661..c5577f4 100644
--- a/node_modules/html-to-react-components/lib/processor.js
+++ b/node_modules/html-to-react-components/lib/processor.js
@@ -7,11 +7,11 @@ var toCode = require("./code");
 var formatCode = require("./format");
 
 function getComponentName(node) {
-  return node.attrs["data-component"];
+  return node.attrs["data-bl-component"];
 }
 
 function removeComponentName(node) {
-  delete node.attrs["data-component"];
+  delete node.attrs["data-bl-component"];
 
   return node;
 }
